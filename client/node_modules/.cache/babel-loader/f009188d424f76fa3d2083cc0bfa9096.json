{"ast":null,"code":"export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1); // create variables to hold reference to the database, transaction (tx), and object store\n\n    let db, tx, store; // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n\n    request.onupgradeneeded = function (e) {\n      const db = request.result; // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n\n      db.createObjectStore('products', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('cart', {\n        keyPath: '_id'\n      });\n    }; // handle any errors with connecting\n\n\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n  });\n}\n; // on database open success\n\nrequest.onsuccess = function (e) {\n  // save a reference of the database to the `db` variable\n  db = request.result; // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n\n  tx = db.transaction(storeName, 'readwrite'); // save a reference to that object store\n\n  store = tx.objectStore(storeName); // if there's any errors, let us know\n\n  db.onerror = function (e) {\n    console.log('error', e);\n  };\n\n  switch (method) {\n    case 'put':\n      store.put(object);\n      resolve(object);\n      break;\n\n    case 'get':\n      const all = store.getAll();\n\n      all.onsuccess = function () {\n        resolve(all.result);\n      };\n\n      break;\n\n    case 'delete':\n      store.delete(object._id);\n      break;\n\n    default:\n      console.log('No valid method');\n      break;\n  } // when the transaction is complete, close the connection\n\n\n  tx.oncomplete = function () {\n    db.close();\n  };\n};","map":{"version":3,"sources":["C:/Users/Johns/Desktop/Coding Bootcamp/Projects/22 Week/shop-shop/client/src/utils/helpers.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AACrC,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,WAAOD,IAAP;AACD;;AACD,SAAOA,IAAI,GAAG,GAAd;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;AACpD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,EAAmC,CAAnC,CAAhB,CAFsC,CAItC;;AACA,QAAIC,EAAJ,EAAQC,EAAR,EAAYC,KAAZ,CALsC,CAOtC;;AACAN,IAAAA,OAAO,CAACO,eAAR,GAA0B,UAAUC,CAAV,EAAa;AACrC,YAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAnB,CADqC,CAErC;;AACAL,MAAAA,EAAE,CAACM,iBAAH,CAAqB,UAArB,EAAiC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAjC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,YAArB,EAAmC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAnC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,MAArB,EAA6B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA7B;AACD,KAND,CARsC,CAgBtC;;;AACAX,IAAAA,OAAO,CAACY,OAAR,GAAkB,UAAUJ,CAAV,EAAa;AAC7BK,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAFD;AAID,GArBM,CAAP;AAsBD;AAAA,C,CAED;;AACAd,OAAO,CAACe,SAAR,GAAoB,UAAUP,CAAV,EAAa;AAC/B;AACAJ,EAAAA,EAAE,GAAGJ,OAAO,CAACS,MAAb,CAF+B,CAG/B;;AACAJ,EAAAA,EAAE,GAAGD,EAAE,CAACY,WAAH,CAAetB,SAAf,EAA0B,WAA1B,CAAL,CAJ+B,CAK/B;;AACAY,EAAAA,KAAK,GAAGD,EAAE,CAACY,WAAH,CAAevB,SAAf,CAAR,CAN+B,CAQ/B;;AACAU,EAAAA,EAAE,CAACQ,OAAH,GAAa,UAAUJ,CAAV,EAAa;AACxBK,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,CAArB;AACD,GAFD;;AAIA,UAAQb,MAAR;AACE,SAAK,KAAL;AACEW,MAAAA,KAAK,CAACY,GAAN,CAAUtB,MAAV;AACAE,MAAAA,OAAO,CAACF,MAAD,CAAP;AACA;;AACF,SAAK,KAAL;AACE,YAAMuB,GAAG,GAAGb,KAAK,CAACc,MAAN,EAAZ;;AACAD,MAAAA,GAAG,CAACJ,SAAJ,GAAgB,YAAY;AAC1BjB,QAAAA,OAAO,CAACqB,GAAG,CAACV,MAAL,CAAP;AACD,OAFD;;AAGA;;AACF,SAAK,QAAL;AACEH,MAAAA,KAAK,CAACe,MAAN,CAAazB,MAAM,CAAC0B,GAApB;AACA;;AACF;AACET,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA;AAhBJ,GAb+B,CAgC/B;;;AACAT,EAAAA,EAAE,CAACkB,UAAH,GAAgB,YAAY;AAC1BnB,IAAAA,EAAE,CAACoB,KAAH;AACD,GAFD;AAGD,CApCD","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n  });\n};\n\n// on database open success\nrequest.onsuccess = function (e) {\n  // save a reference of the database to the `db` variable\n  db = request.result;\n  // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n  tx = db.transaction(storeName, 'readwrite');\n  // save a reference to that object store\n  store = tx.objectStore(storeName);\n\n  // if there's any errors, let us know\n  db.onerror = function (e) {\n    console.log('error', e);\n  };\n\n  switch (method) {\n    case 'put':\n      store.put(object);\n      resolve(object);\n      break;\n    case 'get':\n      const all = store.getAll();\n      all.onsuccess = function () {\n        resolve(all.result);\n      };\n      break;\n    case 'delete':\n      store.delete(object._id);\n      break;\n    default:\n      console.log('No valid method');\n      break;\n  }\n\n  // when the transaction is complete, close the connection\n  tx.oncomplete = function () {\n    db.close();\n  };\n};"]},"metadata":{},"sourceType":"module"}